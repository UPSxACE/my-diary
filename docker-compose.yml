services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    ports:
      - 80:80
      - 443:443
      # -- (Optional) Enable Dashboard, don't do in production
      # - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - ./config/conf/:/etc/traefik/conf/
      - ./config/certs/:/etc/traefik/certs/
    # -- (Optional) When using Cloudflare as Cert Resolver
    # environment:
    #   - CF_DNS_API_TOKEN=your-cloudflare-api-token
    restart: unless-stopped
    depends_on:
      - web
    networks:
      - traefik_network
  postgres_db:
    container_name: postgres_db
    build:
      context: ./postgres
      dockerfile: Dockerfile
    env_file: .env
    image: postgres:latest
    volumes:
      - postgres_db_data:/var/lib/postgresql/data # We are creating a directory var/lib/mysql inside the volume "postgres_db"
    restart: always
    networks:
      - traefik_network
  api:
    container_name: api
    build:
      context: ./api
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - postgres_db
    networks:
      - traefik_network
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.entrypoints=web
      - traefik.http.routers.api.rule=Host(`${API_HOSTNAME}`)
      # - traefik.http.routers.api.tls=true
      # - traefik.http.routers.api.tls.certresolver=production
  web:
    container_name: web
    build:
      context: ./web
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - api
    networks:
      - traefik_network
    labels:
      - traefik.enable=true
      - traefik.http.routers.nextjs.entrypoints=web
      - traefik.http.routers.nextjs.rule=Host(`${WEB_HOSTNAME}`)
      # - traefik.http.routers.nextjs.tls=true
      # - traefik.http.routers.nextjs.tls.certresolver=production

networks:
  traefik_network:
    external: true

volumes:
  postgres_db_data:
    driver: local
